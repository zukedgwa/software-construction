Yu, Y., Dayani-Fard, H., Mylopoulos, J., & Andritsos, P. (2005). Reducing build time through precompilations for evolving large software. Proceedings of the 21st IEEE International Conference on Software Maintenance (ICSM '05), 26-29 September, Budapest, Hungary. https://doi.org/10.1109/ICSM.2005.73

[1] R. Adams, W. Tichy, and A. Weinert. The cost of selective recompilation and environment processing. TOSEM, 3(1):3– 28, Jan. 1994.

[2] P. Andritsos and V. Tzerpos. Software clustering based on information loss minimization. In 10th WCRE, pages 334– 344, Nov. 2003.

[3] Bell Canada. DATRIX abstract semantic graph reference manual (version 1.4). Technical report, Bell Canada, 2000.

[4] E. A. Borison. Program Changes and the Cost of Selective Recompilation. PhD thesis, Carnegie Mellon University, 1989.

[5] H. Dayani-Fard. Quality-based software release management. PhD thesis, Queen’s University, 2003.

[6] H. Dayani-Fard, Y. Yu, J. Mylopoulos, and P. Andritsos. Improving the build architecture of legacy C/C++ software systems. In FASE 2005, pages 96–110.

[7] A. de Boor. Pmake - a parallel make. Technical report, U.C. Berkeley, Fall 1987.

[8] J. Devaney, R. Lipman, M. Lo, W. Mitchell, M. Edwards, and C. Clark. PADE - the parallel applications development environment. Gaithersburg, Maryland 20899, 1995.

[9] J. E. Devaney. Converting pvmmake to mpimake under LAM, and MPI and parallel genetic programming. In A. Lumsdaine, editor, MPI Developers Conference, 22-23 June 1995.

[10] S. Feldman. Make - a program for maintaining computer programs. SPE, pages 255–265, April 1979.

[11] C. J. Fleckenstein and D. Hemmendinger. A parallel ‘make’ utility based on Linda’s tuple-space. In 17th ACM conference on Comp. Sci., pages 216–220. ACM Press, 1989.

[12] GNU. http://gcc.gnu.org/gcc-3.4/.

[13] R. C. Holt. Structural manipulations of software architecture using Tarski relational algebra. In WCRE, October 1998.

[14] R. C. Holt, A. E. Hassan, B. Lague, S. Lapierre, and C. Leduc. E/R schema for the Datrix C/C++/Java exchange format. In WCRE, pages 284–286, 2000.

[15] B. Koehler and R. N. Horspool. CCC: A caching compiler for C. SPE, 27(2):155–165, 1997.

[16] G. E. Krasner and S.T.Pope. A cookbook for using the Model-View-Controller user interface paradigm in Smalltalk-80. Journal of OOP, 1(3):26–49, 1988.

[17] T. Krishnaswamy. Automatic precompiled headers: Speeding up C++ application build times. In WIESS’2000 in conjunction with USENIX OSDI’2000. ACM, 2000.

[18] J. Lakos. Large-scale C++ software design. AddisonWesley, 1996.

[19] M. M. Lehman. Laws of software evolution revisited. Lecture Notes in Computer Science, 1149:108–120, 1996.

[20] A. Litman. An implementation of precompiled headers. SPE, 23(3):341–350, Mar. 1993.

[21] B. Moolenaar. Vim 6.2. In http://www.vim.org, 2003.

[22] MSDN. Visual C++ precompiled header compiler options.

[23] T. Onodera. Reducing compilation time by a compilation server. SPE, 23(5):477–485, May 1993.

[24] Platform, Inc. Using lsmake. In LSF User’s Guide.

[25] M. Pool. distcc: a fast, free distributed C/C++ compiler. In http://distcc.samba.org.

[26] N. Rajala, D. Campara, and N. Mansurov. InSight: reverse engineer case tool. In ICSE, pages 630–633, 1999.

[27] D. Schouten, X. Tian, A. Bik, and M. Girkar. Inside the Intel compiler. Linux Journal, 2003(106):4, 2003.

[28] Sun Microsystems. Distributed make: http://wwws.sun.com/software/sundev/news/features/dmake.html.

[29] A. Tridgell. ccache: http://ccache.samba.org.

[30] H. van Vliet. Software Engineering: principles and practice, 2nd Ed. John Wiley, 2000.

[31] Y. Yu, H. Dayani-Fard, and J. Mylopoulos. Removing false code dependencies to speedup software development processes. In CASCON’03, pages 288–297, Oct. 2003.

